#!/usr/bin/env bash

PORT=8080
ADDRESS=0.0.0.0

fatal() {
    echo '[fatal]' "$@" >&2
    exit
}

urldecode() {
    # Usage: urldecode "string"
    : "${1//+/ }"
    printf '%b\n' "${_//%/\\x}"
}

normalize-path() {
    local path=/$1

    IFS='/' read -r -a parts <<< "$path"

    local part
    local -a out=()
    for part in "${parts[@]}"; do
        case $part in
        '') ;; # ignore empty dir (multiple /)
        '.') ;; # ignore current dir
        '..') unset 'out[-1]' 2>/dev/null;;
        *) out+=("$part");;
        esac
    done

    local string
    string=$(IFS=/; echo "${out[*]}")
    echo "/$string"
}

list-directory() {
    local d=$1

    shopt -s nullglob dotglob
    
    echo '<h1>Directory Listing</h1>'
    echo "<h2>Directory: $d</h2>"
    echo '<hr>'
    echo '<ul>'
    for f in .. "$d"/*; do
        f=${f##*/}
        printf '<li><a href="%s">%s</a></li>\n' \ "$f" "$f"
    done
    echo '</ul>'
    echo '</hr>'
}

parse-request() {

    declare -gA REQ_INFO=()
    declare -gA REQ_HEADERS=()

    local state='status'
    local line

    while read -r line; do
        line=${line%$'\r'}

        case "$state" in
                'status')
                        # parse the status line
                        # "GET /foo.txt HTTP/1.1"
                        local method path version
                        read -r method path version <<< "$line"
                        REQ_INFO[method]=$method
                        REQ_INFO[path]=$path
                        REQ_INFO[version]=$version
                        state='headers'
                        ;;
                'headers')
                        # parse the headers
                        if [[ -z $line ]]; then
                            # doesnt support body parsing
                            break
                        fi
                        local key value
                        IFS=: read -r key value <<< $line
                        key=${key,,}
                        value=${value# *}
                        REQ_HEADERS[$key]=$value
                        ;;
                'body')
                        fatal 'body parsing not supported'
                        ;;
        esac
    done
}

process-request() {
    local fd=$1
    parse-request <&"$fd"

    #validate the request
    # [[ ${REQ_INFO[version]} == 'HTTP/1.1' ]] || fatal 'Unsupported HTTP version'
    # [[ ${REQ_INFO[method]} == 'GET' ]] || fatal 'Unsupported HTTP method'
    # [[ ${REQ_INFO[path]} == /* ]] || fatal 'invalid path'

    echo "$ip ${REQ_INFO[method]} ${REQ_INFO[path]}"

    # if we are here, we should reply to the caller
    # /foo%20bar.txt?query=something
    local path=${REQ_INFO[path]}

    # "./.foo%20bar.txt?query=whatever"
    path=${path:1}

    # "././foo%20bar.txt"
    local query
    IFS='?' read -r path query <<< "$path"

    # "././foo bar.txt"
    path=$(urldecode "$path")

    # "././foo bar.txt"
    path=$(normalize-path "$path")

    # "foo bar.txt"
    path=${path:1}

    # handle empty path(root path)
    path=${path:-.}
    # path=${path:-'index.html'}
    echo "trying to find file '$path'"


    if [[ -f $path ]]; then
        printf 'HTTP/1.1 200 OK\r\n' >&"$fd"
        printf 'Content-Type: text/plain\r\n' >&"$fd"
        printf '\r\n' >&"$fd"
        cat "$path" >&"$fd"
    elif [[ -d $path ]]; then
        printf 'HTTP/1.1 200 OK\r\n' >&"$fd"
        printf 'Content-Type: text/html\r\n' >&"$fd"
        printf '\r\n' >&"$fd"
        list-directory "$path" >&"$fd"
    else
        printf 'HTTP/1.1 404 Not Found\r\n' >&"$fd"
        printf '\r'
    fi

    exec {fd}>&-
}

main() {

    enable accept || fatal 'failed to load accept'
    local fd ip
    echo "Listing on https://$ADDRESS:$PORT"

    while true;
        do
            accept -b "$ADDRESS" -v fd -r ip "$PORT" || fatal 'failed to read socket'
            process-request "$fd"
        done
    
}

main "$@"